
plugins {
    // provides configurations for annotation processing, and passes the annotation processor to
    // the javac "-processorpath" option:
    id "net.ltgt.apt" version "0.19"
	
    id "com.iadams.sonar-packaging" version "1.0-RC1"
    id "org.sonarqube" version "2.6.2"
    id 'net.researchgate.release' version '2.8.0'
    id "com.jfrog.bintray" version "1.8.4"
}

sonarqube {
    properties {
        property "sonar.projectName", "QAvalidator"
        property "sonar.exclusions", "**/*.html,**/*.css,**/*.js"
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'

apply plugin: 'java-library'

// for publishing via Bintray
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

// use this everywhere to ease using Lombok
apply plugin: 'net.ltgt.apt'

group = 'de.qaware.qav'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	jcenter()
	mavenCentral()
}

uploadArchives {
	repositories {
		mavenDeployer {
			// set the properties via -P to publish to your company repo
			repository(url: project.nexusUrl) {
				authentication(userName: project.nexusUsername, password: project.nexusPassword)
			}
			snapshotRepository(url: project.nexusSnaphotUrl) {
				authentication(userName: project.nexusUsername, password: project.nexusPassword)
			}
		}
	}
}

release {
	failOnCommitNeeded = true
	failOnPublishNeeded = false
	failOnSnapshotDependencies = true
	failOnUnversionedFiles = true
	failOnUpdateNeeded = true
	revertOnFail = true
	preCommitText = '[Gradle Release Plugin] '
	preTagCommitMessage = '- pre tag commit: '
	tagCommitMessage = '- creating tag: '
	newVersionCommitMessage = '- new version commit: '
	tagTemplate = 'release-${version}'
	versionPropertyFile = 'gradle.properties'
	versionProperties = []
	buildTasks = ['build']

	git {
		requireBranch = '' // allow releases from any branch
	}
}

ext {
	// set the minimum required SonarQube version
	sonarqubeVersion = "5.6.3"
	antVersion = "1.10.5"
	guavaVersion = "27.0-jre"
	lombokVersion = "1.18.4"
	
	slf4jVersion = "1.7.25"
	logbackVersion = "1.2.3"

	junitVersion = "4.12"
	mockitoVersion = "2.23.4"
	hamcrestVersion = "1.3"		
	jacocoToolVersion = "0.8.2"
}

dependencies {
	// Lombok
	annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
	compileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"

    provided "org.sonarsource.sonarqube:sonar-plugin-api:${sonarqubeVersion}"
    compile "com.google.guava:guava:${guavaVersion}"
    compile "org.apache.ant:ant:${antVersion}"

    provided "org.slf4j:slf4j-api:${slf4jVersion}"
    provided "ch.qos.logback:logback-core:${logbackVersion}"
    provided "ch.qos.logback:logback-classic:${logbackVersion}"

	// Tests
	testCompile "junit:junit:${project.ext.junitVersion}"
	testCompile "org.mockito:mockito-core:${project.ext.mockitoVersion}"
	testCompile "org.hamcrest:hamcrest-integration:${project.ext.hamcrestVersion}"
}

jacoco {
	toolVersion = project.ext.jacocoToolVersion
	reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
}

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

sonarPackaging {
    // local environment, for testing:
    serverUrl = 'http://localhost:9000'
    pluginDir = 'v:/software/sonarqube-5.6.4/extensions/plugins'

    // Plugin metadata:
    pluginKey = 'qavSonarPlugin'
    pluginClass = 'de.qaware.qav.sonar.plugin.QavSonarPlugin'
    pluginName = 'QAvalidator SonarQube Plugin'
    pluginDescription = 'Show the QAvalidator results in SonarQube'

    // Info:
    pluginParent = null
    pluginLicense = '' // not decided yet
    requirePlugins = null
    pluginUrl = 'https://qavalidator.github.io/'
    pluginIssueTrackerUrl = 'https://github.com/qavalidator/qavalidator/issues'
    pluginTermsConditionsUrl = 'https://github.com/qavalidator/qavalidator'
    pluginSourceUrl = 'https://github.com/qavalidator/qavalidator/issues'
    pluginDevelopers = 'QAware GmbH'
    skipDependenciesPackaging = false
    useChildFirstClassLoader = false
    basePlugin = ''
    organization{
        name = 'QAware GmbH'
        url = 'https://www.qaware.de'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        qavSonarPlugin(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('name', "QAvalidator :: ${project.name}")
                asNode().appendNode('description', project.description)
                asNode().appendNode('url', project.websiteUrl)

                asNode().children().last() + project.pomConfig
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUsername') ? project.bintrayUsername : 'unknown'
    key = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : 'unknown'
    publications = ['qavSonarPlugin']
    dryRun = false
    publish = true
    pkg {
        repo = project.bintrayRepo
        name = project.name
        desc = project.description
        licenses = ['Apache-2.0']
        labels = ['qaware', 'architecture', 'validation']
        websiteUrl = project.websiteUrl
        issueTrackerUrl = project.issueTrackerUrl
        vcsUrl = project.scmUrl
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = project.description
            released = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
            vcsTag = "v${project.version}"
            mavenCentralSync {
                sync = false
            }
        }
    }
}

// information for bintray publishing
ext {
	pomConfig = {

		inceptionYear '2015'

		scm {
			connection "scm:git:${project.scmUrl}"
			developerConnection "scm:git:${project.scmUrl}"
			url project.websiteUrl
		}

		issueManagement {
			system 'GitHub'
			url project.issueTrackerUrl
		}

		licenses {
			license([:]) {
				name 'The Apache Software License, Version 2.0'
				url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
				distribution 'repo'
			}
		}

		organization {
			name 'QAware GmbH'
			url 'https://www.qaware.de'
		}

		developers {
			developer {
				id 'lreimer'
				name 'Mario-Leander Reimer'
				email 'mario-leander.reimer@qaware.de'
				organization 'QAware GmbH'
				organizationUrl 'https://www.qaware.de'
				roles {role 'Developer'}
			}
			developer {
				id 'tilmanseifert'
				name 'Tilman Seifert'
				email 'tilman.seifert@qaware.de'
				organization 'QAware GmbH'
				organizationUrl 'https://www.qaware.de'
				roles {role 'Developer'}
			}
		}
	}
}
